name: DIVA_APT Backend AI CI/CD Pipeline

on:
  push:
    branches:
      - main
      - cicd-test

env:
  SERVER_USERNAME: ${{ secrets.SERVER_USERNAME}}
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
  SERVER_SSH_PORT: ${{ secrets.SERVER_SSH_PORT }}
  APPLICATION_PROPERTIES: ${{ secrets.APPLICATION_PROPERTIES }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

jobs:
  build-application:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Java 17 세팅
      - name: JDK-17 세팅
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      #      # SSH key, SCP 설치
      #      - name: Install SSH key and SCP tools
      #        run: |
      #          sudo apt-get update
      #          sudo apt-get install -y openssh-client
      #          echo $SERVER_SSH_KEY > private_key
      #          chmod 600 private_key

      # 디버그용
      - name: 경로 출력 (디버그용)
        run: |
          ls
          pwd
          ls src
          ls src/main

      #      # 빌드에 포함되는 필수 리소스 파일 다운로드 (with scp)
      #      - name: Download necessary file
      #        uses: appleboy/scp-action@v0.1.7
      #        with:
      #          host: ${{ env.SERVER_IP }}
      #          username: ${{ env.SERVER_USERNAME }}
      #          key: ${{ env.SERVER_SSH_KEY }}
      #          port: ${{ env.SERVER_SSH_PORT }}
      #          source: "/home/${{ env.SERVER_USERNAME }}/server/resources"
      #          target: "src/main"

      # application.properties 생성
      - name: application.properties 생성
        run: echo "${{ env.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties

      # jar 빌드
      - name: 빌드
        run: ./gradlew clean build

      # 원격 서버로 jar 파일 업로드 (with scp)
      - name: 원격 서버로 jar 파일 업로드
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_SSH_PORT }}
          source: "build/libs/diva_apt_ai.jar"
          target: "/home/${{ env.SERVER_USERNAME }}/server"

  sync-ai-model:
    runs-on: ubuntu-latest
    needs: build-application
    steps:
      # AI 모델 레포 최신화
      - name: AI 모델 레포 최신화
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_SSH_PORT }}
          script: |
            cd
            if [ -d "./diva-ai-research" ]; then
              cd ~/diva-ai-research
              git pull origin main
            else
              git clone https://github.com/DIVA-APT/diva-ai-research
            fi
            
            cd ~/diva-ai-research
            echo "OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}" > .env
            echo "PINECONE_API_KEY=${{ env.PINECONE_API_KEY }}" >> .env

  deploy:
    runs-on: ubuntu-latest
    needs: [ build-application, sync-ai-model ]
    steps:
      # 배포 (daemon)
      - name: 서버 애플리케이션 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USERNAME }}
          key: ${{ env.SERVER_SSH_KEY }}
          port: ${{ env.SERVER_SSH_PORT }}
          script: |
            sudo systemctl restart diva-ai-spring